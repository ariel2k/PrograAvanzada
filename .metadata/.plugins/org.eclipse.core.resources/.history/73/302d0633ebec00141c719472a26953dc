
package Math;
import java.util.GregorianCalendar;
import java.util.Calendar;

public class FMatrizMath {
	private int fila, columna;
	private double mat[][];

	
	public void setMat(double[][] mat) {
		this.mat = mat;
	}

	public int getFila() {
		return fila;
	}

	public int getColumna() {
		return columna;
	}

	public double[][] getMat() {
		return mat;
	}

	public MatrizMath(int fi, int co) {
		this.fila = fi;
		this.columna = co;
		this.mat = new double[fi][co];
	}

	public MatrizMath(String ruta) {
		Archivo arch = new Archivo(ruta);
		// Lectura del fichero
		String linea = arch.leerArchivo();
		// Split de la linea
		String[] splited = linea.split(" ");
		String[] datos;
		// esto son las filas y columnas de mi matriz
		int fi = Integer.parseInt(splited[0]),
			co = Integer.parseInt(splited[1]),
			coordx,
			coordy;
		this.fila = fi;
		this.columna = co;
		this.mat = new double[fi][co];
		for (int i = 1; i <= fi * co; i++) {
			linea = arch.leerArchivo();
			datos = linea.split(" ");
			coordx = Integer.parseInt(datos[0]);
			coordy = Integer.parseInt(datos[1]);
			this.mat[coordx][coordy] = Double.parseDouble(datos[2]);
		}

	}
	// Suma y resta
	public MatrizMath sumar(MatrizMath matrizSum) throws DistDimException {
		if (this.fila != matrizSum.fila && this.columna != matrizSum.columna)
			throw new DistDimException(" Distinta Dimension ");
		MatrizMath resultado = new MatrizMath(this.fila, this.columna);
		for (int i = 0; i < this.fila; i++) {
			for (int j = 0; j < this.columna; j++) {
				resultado.mat[i][j] = this.mat[i][j] + matrizSum.mat[i][j];
			}
		}
		return resultado;
	}

	public MatrizMath restar(MatrizMath matrizRest) throws DistDimException {
		if (this.fila != matrizRest.fila && this.columna != matrizRest.columna)
			throw new DistDimException(" Distinta Dimension ");
		MatrizMath resultado = new MatrizMath(this.fila, this.columna);
		for (int i = 0; i < this.fila; i++) {
			for (int j = 0; j < this.columna; j++) {
				resultado.mat[i][j] = this.mat[i][j] - matrizRest.mat[i][j];
			}
		}
		return resultado;
	}
	// Productos
		// Matriz por Matriz
	public MatrizMath producto(MatrizMath matriz) throws DistDimException {
		if (this.columna != matriz.fila)
			throw new DistDimException(" Numero de columnas de la primera matriz, no coincide con el de columnas de la segunda  ");
		MatrizMath resultado = new MatrizMath(this.fila, matriz.columna);
		for (int i = 0; i < this.fila; i++)
			for (int j = 0; j < matriz.columna; j++)
				for (int ciclo = 0; ciclo < this.columna; ciclo++)
					resultado.mat[i][j] += this.mat[i][ciclo] * matriz.mat[ciclo][j];
		return resultado;
	}
		// Matriz por Constante float
	public MatrizMath producto(float n) {
		MatrizMath resultado = new MatrizMath(this.fila, this.columna);
		for (int i = 0; i < this.fila; i++)
			for (int j = 0; j < this.columna; j++)
				resultado.mat[i][j] = n * this.mat[i][j];
		return resultado;
	}
		// Matriz por Vector
	public MatrizMath producto(VectorMath vec) throws DistDimException{
		if (this.columna != vec.getDimension()) 
			throw new DistDimException(" Numero de filas del vector, no coincide con el numero de columnas de la matriz ");
		MatrizMath resultado = new MatrizMath(this.fila, 1);
		for (int i = 0; i < this.fila; i++)
			for (int j = 0; j < vec.getDimension(); j++)
					resultado.mat[i][0] += this.mat[i][j] * vec.getVec()[j];						
		return resultado;
	}
	// Determinante
	public double determinante() throws DistDimException {
		if (this.columna != this.fila)
			throw new DistDimException(" No es una matriz cuadrada ");
		int dim = this.columna;
		if(dim == 2) {
			return(this.mat[0][0] * this.mat[1][1] - this.mat[0][1] * this.mat[1][0]);
		}
		else {
			// Si no es de 2 * 2
			double det = 0;
			MatrizMath subMat = new MatrizMath(dim - 1, dim - 1);
			for(int k = 0; k < dim; k++) {
				for(int i = 1; i < dim; i++) {
					for(int j = 0, z = 0; j < dim; j++) {	
						if(j != k) {
							subMat.mat[i-1][z] = this.mat[i][j];
							z++;
						}
					}
				}
				int m;
				if(k % 2 != 0)
					m = -1;
				else
					m = 1;
				det += this.mat[0][k] * subMat.determinante() * m;
			}
			return det;
		}		
	}
	// toString
	public String toString() {
		String cad = new String("");
		for (int i = 0; i < this.fila; i++) {
			cad += "[";
			for (int j = 0; j < this.columna; j++) {
				if (this.mat[i][j] >= 0)
					cad += " ";
				cad += this.mat[i][j] + " ";
			}
			cad += "]\n";
		}
		return cad;
	}
	// Inversa
	public void identidad() {
		for (int i=0, j=0; i<this.fila; i++, j++)
			this.mat[i][j] = 1;
	} 

	public void intercambiarCero(int fila) {
		for(int i = fila + 1; i < this.fila; i++)
			if(this.mat[i][fila] != 0)
				this.intercambiar(i, fila);
	}


	public void intercambiar(int filaOrigen, int filaDestino) {
		double aux;
		for(int i=0; i<this.fila; i++) {
			aux = this.mat[filaDestino][i];
			this.mat[filaDestino][i] = this.mat[filaOrigen][i];
			this.mat[filaOrigen][i] = aux;
		}
	}

	public void sumarFilas(int filaOrigen, int filaDestino, double numb) {
		for(int i=0; i<this.fila; i++){
			this.mat[filaDestino][i] += this.mat[filaOrigen][i] * numb;
		}
	}

	public void dividirFila(double n, int filaDestino) {
		for(int i=0; i<this.fila; i++)
			this.mat[filaDestino][i] /= n;
	}
	
	public MatrizMath inversa() throws DistDimException {
		if (this.determinante() == 0)
			throw new DistDimException ("No es posible obtener la matriz inversa ya que el determinante es igual a cero");
		int dimension = this.fila;
		MatrizMath inversa = new MatrizMath (dimension, dimension);
		inversa.identidad();
		double aux;
		
		/*Triangular*/
		for(int i = 0; i < dimension; i++) {
			if(this.mat[i][i] == 0)
				this.intercambiarCero(i);
			aux = this.mat[i][i];
			inversa.dividirFila(aux, i);
			this.dividirFila(aux, i);
			for(int j = i+1; j < dimension; j++) {
				inversa.sumarFilas(i, j,-this.mat[j][i]);
				this.sumarFilas(i, j,-this.mat[j][i]);
			}
		}
		for(int i = dimension - 1; i >= 0; i--) {
			aux = this.mat[i][i];
			this.dividirFila(aux, i);
			inversa.dividirFila(aux, i);
			for(int j = i-1; j >= 0; j--) {
				inversa.sumarFilas(i, j,-this.mat[j][i]);
				this.sumarFilas(i, j,-this.mat[j][i]);		
			}
		}
		return inversa;
	}
	
	public static void main(String[] args) {
		MatrizMath mat1 = new MatrizMath("mat1.in");
		MatrizMath mat2 = new MatrizMath("mat2.in");
		MatrizMath mat3 = new MatrizMath("mat3.in");
		MatrizMath mat4 = new MatrizMath("mat4.in");
		MatrizMath mat5 = new MatrizMath("mat5.in");
		MatrizMath mat6 = new MatrizMath("mat6.in");
		MatrizMath mat7 = new MatrizMath("mat7.in");
		MatrizMath mat8 = new MatrizMath("mat8.in");
		VectorMath vec2 = new VectorMath("vec2.in");
		/*System.out.println("La matriz 1:\n" + mat1);
		System.out.println("La matriz 2:\n" + mat2);
		System.out.println("La matriz 3:\n" + mat3);
		System.out.println("La matriz 4:\n" + mat4);
		System.out.println("La matriz 5:\n" + mat5);
		System.out.println("La matriz 6:\n" + mat6);
		System.out.println("La matriz 7:\n" + mat7);
		System.out.println("El vector 2:\n" + vec2);
		// Suma entre matrices
		System.out.println("Mat1 + Mat1:\n" + mat1.sumar(mat1));
		System.out.println("Mat1 + Mat2:\n" + mat1.sumar(mat2));
		// Resta entre matrices
		System.out.println("Mat1 - Mat1:\n" + mat1.restar(mat1));
		System.out.println("Mat1 - Mat2:\n" + mat1.restar(mat2));
		// Producto entre matrices
		System.out.println("Mat3 * Mat4:\n" + mat3.producto(mat4));
		// Producto entre matriz y un numero flotante
		System.out.println("Mat1 * 2.53:\n" + mat1.producto(2.53f));
		// Producto entre matriz y un vector
		System.out.println("mat4 * vec2:\n" + mat4.producto(vec2));
		// Determinante
		System.out.println("Det(Mat5): " + mat5.determinante());
		System.out.println("Det(Mat6): " + mat6.determinante());
		System.out.println("Det(Mat7): " + mat7.determinante());
		//Identidad, suma y resta
		MatrizMath iden = new MatrizMath(4,4);
		iden.identidad();*/
		System.out.println("Det(Mat4): " + mat4.determinante());
		System.out.println(mat4);
		System.out.println(mat4.inversa());
		System.out.println(mat4);
		Calendar tIni = new GregorianCalendar();
		Calendar tFin = new GregorianCalendar();
		double diff = tFin.getTimeInMillis() - tIni.getTimeInMillis();
		System.out.println(diff);     
	}
}