package Math;

import java.util.Arrays;

public class VectorMath {

	private int dimension;
	private double[] vec;
	
	public VectorMath(String ruta) {
		Archivo arch = new Archivo(ruta);
		this.dimension = Integer.parseInt(arch.leerArchivo());
		vec = new double[dimension];
		for(int i=0; i<this.dimension; i++) {
			vec[i] = Double.parseDouble(arch.leerArchivo());
		}
	}

	public VectorMath(int dimension) {
		this.dimension = dimension;
		this.vec = new double[this.dimension];
	}
	
	public VectorMath clone() {
		VectorMath v = new VectorMath(this.dimension);
		for(int i=0; i<this.dimension; i++) {
			v.vec[i] = this.vec[i];
		}
		return v;
	}

	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		VectorMath other = (VectorMath) obj;
		if (dimension != other.dimension)
			return false;
		if (!Arrays.equals(vec, other.vec))
			return false;
		return true;
	}

	public VectorMath sumar(VectorMath v) throws DistDimException{
		if (this.dimension != v.dimension)
			throw new DistDimException(" Distinta Dimension ");
		
		VectorMath suma = new VectorMath(this.dimension);
		for(int i=0; i<this.dimension; i++) {
			suma.vec[i] = this.vec[i] + v.vec[i];
		}
		return suma;		
	}
	
	public VectorMath restar(VectorMath v) throws DistDimException{
		if (this.dimension != v.dimension)
			throw new DistDimException(" Distinta Dimension ");
		
		VectorMath resta = new VectorMath(this.dimension);
		for(int i=0; i<this.dimension; i++) {
			resta.vec[i] = this.vec[i] - v.vec[i];
		}
		return resta;		
	}
	
	public VectorMath producto(VectorMath v) throws DistDimException{
		if (this.dimension != v.dimension)
			throw new DistDimException(" Distinta Dimension ");
		
		VectorMath prod = new VectorMath(this.dimension);
		for(int i=0; i<this.dimension; i++) {
			prod.vec[i] = this.vec[i] * v.vec[i];
		}
		return prod;		
	}
	
	public VectorMath producto(double n) {
		VectorMath prodN = new VectorMath(this.dimension);
		for(int i = 0; i<this.dimension; i++) {
			prodN.vec[i] = this.vec[i] * n;
		}
		return prodN;
	}
	private double modulo(double num) {
		if(num >= 0)
			return num;
		else
			return -num;
	}
	public double normaUno() {
		double cont = 0;
		for(int i = 0; i<this.dimension; i++) {
			cont += modulo(this.vec[i]);
		}
		return cont;
	}
	
	public double normaDos() {
		double cont = 0;
		for(int i = 0; i<this.dimension; i++) {
			cont += this.vec[i] * this.vec[i];
		}
		return Math.sqrt(cont);
	}
	
	public double normaInfinito() {
		double max = 0;
		for(int i = 1; i<this.dimension; i++) {
			if(modulo(this.vec[i]) > max)
				max = modulo(this.vec[i]);
		}
		return max;
	}
	
	public String toString() {
		String cad = new String("");
		for(int i = 0; i < this.dimension; i++) {
			cad +=  (i+1) + " [" + this.vec[i] + "]\n";
		}
		return cad;
	}
	
	public static void main(String[] args) {
		// Suma de vectores
		// Resta de vectores
		VectorMath vec1 = new VectorMath("vec1.in");
		VectorMath vec2 = new VectorMath("vec2.in");
		System.out.println("Vec1: \n" + vec1);
		System.out.println("Vec2: \n" + vec2);
		System.out.println("Suma: \n" + vec1.sumar(vec2));
		System.out.println("Resta: \n" + vec1.restar(vec2));
		System.out.println("Producto: \n" + vec1.producto(vec2));
		System.out.println("Producto por 3: \n" + vec1.producto(3));
		System.out.println("Norma Uno: " + vec1.normaUno());
		System.out.println("Norma Dos: " + vec1.normaDos());
		System.out.println("Norma Infinito: " + vec1.normaInfinito());
		VectorMath vec3 = vec1.clone();
		System.out.println("\nClonado de vector 1: \n" + vec3);
		if(vec1.equals(vec2))
			System.out.println("Vectores iguales");
		else
			System.out.println("Vectores distintos");
	}

}
